//New base projectile. Handles everything that proj_base and proj_arrow_base used to.
//
//-base_proj- by greatguys1.
//
//Makes projectile setup easy. Also makes non-obtainable projectiles work without being cached as an item.
//Projectile can be fired dynamically too. How cool.
//
//To fire this generic arrow, it must first be spawned via createitem, with the following
// parameters provided:
//	<model;offset;animation;gravity> <dmg;dmgType;aoe_range;falloff;bbox|hitbox|world|none> <none|(R,G,B);range> <motionBlur:0|1;stick:0|1>
//Then get the ID of the item you just created via ent_lastcreated and fire it with tossprojectile.

//If you want to include this in a new projectile item, you can override all of the consts and use the events (and overrides) for more control of your script.
//You can also use the default usage, and call game_dynamically_created with the params that you want.

//Example usage (Fires projectile from view of first player on server):
//
//local L_PLAYER $get_by_idx(1,id)
//local L_ANGLES $get(L_PLAYER,viewangles)
//<model;offset;animation;gravity> <dmg;dmgType;aoe_range;falloff;bbox|hitbox|world|none> <none|(R,G,B);range> <motion_blur:0|1;stick_in_enemy:0|1>
//createitem "base_proj" $get(ent_me,origin) "weapons/projectiles.mdl;0;1;0.02" "50;fire_effect;100;0;hitbox" "(0,255,0);80" "1;1"
//local L_PROJ_ID $get(ent_lastcreated,id)
//local L_START $relpos(L_ANGLES,$vec(0,1600,0))
//tossprojectile <projectile scriptname> <spawnLoc> <vec(x,y,z)> [skill]
//callexternal L_PLAYER ext_tossprojectile L_PROJ_ID $get(L_PLAYER,origin) L_START spellcasting.fire

{
	//Properties after proj gets fired
	const BASE_TOSS_MODEL		PROJ_TOSS_MODEL
	const BASE_TOSS_MODEL_BODY	PROJ_TOSS_MODEL_BODY
	const BASE_TOSS_ANIM		PROJ_TOSS_ANIM
	const BASE_TOSS_GRAVITY		PROJ_TOSS_GRAVITY

	//Registerprojectile settings
	const BASE_PROJ_DAMAGE	PROJ_DAMAGE
	const BASE_DAMAGE_TYPE	PROJ_DAMAGE_TYPE //_effect makes the attack non-parryable 
	const BASE_AOE_RANGE	PROJ_AOE_RANGE
	const BASE_AOE_FALLOFF	PROJ_AOE_FALLOFF //0 = no falloff. unsure of algorithm
	const BASE_HITBOX_ONLY	PROJ_HITBOX_ONLY //Projectiles should in most cases hit hitboxes, not bboxes.
	const BASE_IGNORENPC	PROJ_IGNORENPC //Completely ignore entities
	const BASE_IGNOREWORLD 	PROJ_IGNOREWORLD //if set to 1, ignore world collision.
	
	//Client Side Effect Settings
	const BASE_CLFX_SCRIPT "items/base_proj_cl" //Set to "none" to turn this feature off.
	const BASE_CLFX_UPDATE_RATE 0.5
	const USING_CLFX $func(func_check_clfx) //Use this const to check to see if this script is using a client side projectile script
}

{ game_spawn

	setmodel "null.mdl" //Helps prevent crash to have a model set rather than unset
	
	invincible 1 //No killing the projectile...
	height 1 //having some sort of hull helps the projectile hit more reliably
	width 1
	setbbox npcsize //height and width set the properties, this cmd takes those and applies it

	//Properties all projectiles should have, and never change.
	setmonsterclip 0 //Avoids colliding with monster clip brushes
	movetype projectile	//Causes the orientation to change based on velocity
	groupable 25 //Although this script is supposed to work independent of actual items, this is still useful since other obtainable arrows still include this.
	
	if ( BASE_DAMAGE_TYPE isnot 'PROJ_DAMAGE_TYPE' ) callevent register_projectile //Check if any registerprojectile settings are set, then call to get the projectile registered.
	//If it is not set, then it likely will be in game_dynamically_created as a dynamic projectile.
}

{ game_dynamically_created //<model;offset;animation;gravity> <dmg;dmgType;aoe_range;falloff;bbox|hitbox|world|none> <none|(R,G,B);range> <motionBlur:0|1;stick:0|1>

	if BASE_DAMAGE_TYPE equals 'PROJ_DAMAGE_TYPE' //Check if settings are set. If they are, then the projectile was already registered
	
	//proj_ prefix refers to dynamically created variables.
	//by default, they correspond with their base_ prefix consts.
	//Some consts can be changed by higher scripts and then still be fired dynamically.
	
	setvard PROJ_TOSS_MODEL $get_token(PARAM1,0)
	setvard PROJ_TOSS_MODEL_BODY $get_token(PARAM1,1)
	setvard PROJ_TOSS_ANIM $get_token(PARAM1,2)
	setvard PROJ_TOSS_GRAVITY $get_token(PARAM1,3)
	
	//Register Projectile Settings
	setvard PROJ_DAMAGE $get_token(PARAM2,0)
	setvard PROJ_DAMAGE_TYPE $get_token(PARAM2,1) //_effect makes the attack non-parryable 
	setvard PROJ_AOE_RANGE $get_token(PARAM2,2) //Splash range. For hitboxes, set to 0. Hits enemy bboxes regardless of projectile setting, but only collides if its within this range of the origin, if set on hitbox.
	setvard PROJ_AOE_FALLOFF $get_token(PARAM2,3) //0 = no falloff, anything higher and dmg falls off. no idea what the algorithm is.
	local L_HIT_TYPE $get_token(PARAM2,4)
	
	//Client side fx
	setvard PROJ_FX_LIGHT PARAM3
	setvard PROJ_FX_MOTION_BLUR $get_token(PARAM4,0) //other projectile effects
	setvard PROJ_FX_STICK $get_token(PARAM4,1)
	
	setvard PROJ_HITBOX_ONLY 0 //Default settings are for bbox
	setvard PROJ_IGNORENPC 0
	setvard PROJ_IGNOREWORLD 0

	//"none" currently does not work.
	if ( L_HIT_TYPE equals 'hitbox' )
	{
		setvard PROJ_HITBOX_ONLY 1
		setvard PROJ_AOE_RANGE 0 //"PARAM3" must always be 0 for "hitbox" to work.
	}
	else if ( L_HIT_TYPE equals 'world' ) //Completely ignores npcs. Does no damage.
	{
		setvard PROJ_HITBOX_ONLY 1 //"world" needs hitbox and ignorenpc set to work.
		setvard PROJ_IGNORENPC 1
	}
	else if ( L_HIT_TYPE equals 'none' ) setvard PROJ_IGNOREWORLD 1 //Does not work. Projectiles are supposed to go through the world, but dont.
	
	callevent register_projectile //Always register the projectile after being dynamically created
}

{ register_projectile

	local reg.proj.dmg BASE_PROJ_DAMAGE
	local reg.proj.dmgtype BASE_DAMAGE_TYPE
	local reg.proj.aoe.range BASE_AOE_RANGE //Splash range when projectile collides
	local reg.proj.aoe.falloff BASE_AOE_FALLOFF //0 = no falloff. Numbers above that will have an increasingly higher dmg falloff. Not recommended to set above 5.
	local reg.proj.collidehitbox BASE_HITBOX_ONLY //If set to true, projectile will only collide with hitboxes, not bounding boxes
	local reg.proj.ignorenpc BASE_IGNORENPC //collide only with world, pass through NPCs if set 1. Note: height and width must be set to 0 for this to work.
	local reg.proj.ignoreworld BASE_IGNOREWORLD //ignore world collision
	registerprojectile
}

{ game_tossprojectile

	useable 0 //Can't be picked up after it's shot/tossed
	gravity BASE_TOSS_GRAVITY

	if ( USING_CLFX ) //If using a client side effect to track the projectile
	{
		//<origin;velocity;gravity> <model;body;animation> <motionBlur:0|1;stick_in_enemy:0|1>
		local L_PHYSICS $get(ent_me,origin) ; $get(ent_me,velocity) ; BASE_TOSS_GRAVITY
		local L_TOSS_MODEL BASE_TOSS_MODEL ; BASE_TOSS_MODEL_BODY ; BASE_TOSS_ANIM
		local L_PROJ_FX PROJ_FX_MOTION_BLUR ; PROJ_FX_STICK
		
		clientevent new all BASE_CLFX_SCRIPT L_PHYSICS L_TOSS_MODEL PROJ_FX_LIGHT L_PROJ_FX
		setvard CLFX_IDX game.script.last_sent_id
	}
	else
	{
		setmodel BASE_TOSS_MODEL
	}
}

{ game_projectile_hitnpc //<npc_id>

	if ( USING_CLFX )
	{
		clientevent update all CLFX_IDX ext_hitnpc $get(PARAM1,index) $get(ent_me,origin)
	}
}

{ game_projectile_hitwall //Only called when it hits a wall, not an npc.

	if ( USING_CLFX )
	{
		clientevent update all CLFX_IDX ext_hitwall
	}
}

{ game_projectile_landed //Gets called whenever projectile hits anything

	//solidifyprojectile
	//setmodel BASE_TOSS_MODEL
	//clientevent update all CLFX_IDX ext_die
	
	deleteme
}

{ game_deleted

	//infomsg all base_proj removed
}

{ func_check_clfx //Returns 0|1 if this projectile is using a client side script

	return **clear
	
	if ( BASE_CLFX_SCRIPT isnot 'none' ) //If using a client side effect to track the projectile
	{
		return 1
	}
	else
	{
		return 0
	}
}